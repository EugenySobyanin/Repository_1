# list() - Любой итерируемый объект можно преобразовать в список функцией list().
a = 'лох'
print(list(a)) 

# list comprehension
a = [2, 3, 4, 5, 6, 7]
b = [el**2 for el in a]
print(b)
# условия в list comprehension (добавляем тернарный оператор)
c = [el**2 if el % 2 != 0 else el * 0 for el in range(1, 21)]
print(c)
# чуть другая запись и другой результат (без else)
d = [el for el in range(1, 21) if el % 2 != 0]
print(d)

# Распаковка списка
week = [
    'Понедельник', 'Вторник', 'Среда', 
    'Четверг', 'Пятница', 'Суббота', 'Воскресенье'
]

mon, tue, wed, thu, fri, sat, sun = week

print(wed)

# Методы ///////////////////////////////////////////////////////
'''Списки — это изменяемый тип данных, 
   поэтому методы изменяют сам объект списка к которому применены, 
   а не создают новый.  '''

# append() - list.append(element)  добавление элемента в конец списка
a = [2, 4, 5, 6, ]
a.append(24)
print(a)
# Метод append() ничего не возвращает, он не создаёт новый объект, а изменяет существующий.

# extend() - list_1.extend(list_2)
'''Расширяет список list_1, добавляя в конец все элементы списка list_2. 
   Визуально результат метода похож на результат конкатенации списков. 
   Разница состоит в том, что:
       - при конкатенации создаётся новый объект, содержащий элементы двух списков;
       - метод extend() изменяет список list_1.
'''
a = [el for el in range(1, 11)]
b = [el for el in range(11, 21)]
a.extend(b)
print(a)

# remove() - list.remove(value)
'''Удаляет первый (при чтении списка слева направо) элемент, 
   значение которого совпадает с аргументом. 
   Если такого элемента нет в списке — будет вызвано исключение.
'''
a = [el for el in 'лох']
a.remove('о')
print(a)

# insert() - list.insert(index, value):
'''подставляет элемент со значением value на позицию index;
   увеличивает индекс элементов, начиная от index, на единицу.'''
a = [el for el in 'лх']
a.insert(1, 'о')
print(a)

# pop() - list.pop(index)
''' удаляет из списка элемент с индексом index и возвращает его. 
    Если индекс не указан, метод удаляет и возвращает последний элемент списка.
'''
a = ['раз', 'два', 'три']
b = a.pop(1)
print(a)
print(b)

# index() - list.index(value, start , end)
'''Читает список слева направо и возвращает индекс первого найденного 
   элемента со значением value. Диапазон поиска можно ограничить 
   индексами start и end.
   Если элемент с заданным значением не найден — 
   будет выведено исключение ValueError.
'''
a = ['раз', 'два', 'три']
print(a.index('три'))

# count() - list.count(value) — возвращает количество элементов со значением value.
a = ['раз', 'два', 'три'] * 10
print(a.count('два'))

# sort() - list.sort()
''' Сортирует список . У этого метода есть необязательный параметр reverse , 
    определяющий направление сортировки. По умолчанию reverse = False, 
    элементы сортируются «по возрастанию», от меньшего к большему.
'''
a = [el for el in range(1, 10)]
a.sort(reverse=True)
print(a)

# reverse() - list.reverse() 
'''инвертирует список. Результат работы метода похож на использование среза [::-1], 
   но в отличие от среза этот метод не создаёт новый объект списка.'''
a = [el for el in range(1, 10)]
a.reverse()
print(a)

# copy - list.copy() — возвращает новый список, независимую копию исходного списка.

# list.clear() — очищает список, удаляет из него все элементы:

 