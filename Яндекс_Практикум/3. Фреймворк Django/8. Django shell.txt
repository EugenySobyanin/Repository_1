Урок 6. Django Shell. CRUD операции в Django ORM - Проще смотреть сам урок на практикум

Django shell, инструмент для управления проектом из консоли. Это Python shell, предназначенный для работы с Django-проектом.

запуск shell - python manage.py shell 

Операции CRUD и работа с записями БД

Create — создание записи
Read — чтение записей
Update — изменение записи
Delete — удаление записи

В классе models.Model есть специальный интерфейс objects; с помощью его методов и выполняются запросы к БД.


Создать запись (Create)
Начнём с метода .create() и создадим запись в таблице.
Пример:
	# Импортируем модель, с которой планируем работать.
	>>> from ice_cream.models import Category

	# Cоздаём объект, передаём значения атрибутов. 
	# Поля со значениями по умолчанию не заполняем: пусть это сделает Django ORM.
	# В поле id тоже не передаём значение.
	>>> Category.objects.create(title='Категория, созданная через shell', slug='shell_category')

	# По нажатию Enter этот код выполнится, и на основе значений, 
	# переданных в метод create(), будет создана новая запись в БД.
	# О чём и будет сообщено вот такой строкой.
	<Category: Category object (1)> 

Получение информации (Read)

При получении записей из БД каждая запись преобразуется в объект модели; Django ORM возвращает специальный объект QuerySet, он содержит список объектов модели, соответствующих условиям запроса. 

Запросим все объекты модели Category — для этого применяется метод .all():
Пример: 
# Модели уже импортированы (если вы не закрывали консоль), 
# повторно их импортировать не надо: Shell всё помнит!
>>> categories = Category.objects.all()

# Что в переменной categories?
>>> categories

# Django shell сообщает, что QuerySet содержит два объекта модели Category с pk 1 и 2:
<QuerySet [<Category: Category object (1)>, <Category: Category object (2)>]> 

Одна из самых востребованных задач при работе с базой — поиск объектов по заданным признакам. В SQL за это отвечают команды блока WHERE, а в Django ORM — метод .filter():
Пример:
# Найти все объекты, значение поля is_published у которых равно True: 
# Получившийся результат можно не присваивать переменной, 
# а сразу вывести в консоль: 
>>> Category.objects.filter(is_published=True)
<QuerySet [<Category: Category object (1)>]>
# Вернулся QuerySet, в котором хранится один объект модели Category (с pk=1)

Чтобы получить отдельный объект, а не QuerySet, применяют метод .get(). 
Django ORM по умолчанию создаёт во всех таблицах поле с первичным ключом, и по этому ключу можно получить из БД нужную запись:
Пример:
>>> category = Category.objects.get(pk=1)
>>> category
# Получаем <Объект> модели Category с указанным в запросе pk:
<Category: Category object (1)> 

Поле с первичным ключом в таблице называется id, но в Django ORM к первичному ключу любой таблицы можно обращаться и по имени поля, и по псевдониму pk. 
