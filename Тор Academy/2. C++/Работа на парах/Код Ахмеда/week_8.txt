#include <iostream>
#include <ctime>
using namespace std;

// void insertSort(int arrayPtr[], int length){
    
//     int temp, // временная переменная для хранения значения элемента сортируемого массива
//         item; // индекс предыдущего элемента
//     for (int counter = 1; counter < length; counter++)
//     {
//         temp = arrayPtr[counter]; // инициализируем временную переменную текущим значением элемента массива
//         item = counter-1; // запоминаем индекс предыдущего элемента массива
//         while(item >= 0 && arrayPtr[item] > temp) // пока индекс не равен 0 и предыдущий элемент массива больше текущего
//         {
//             arrayPtr[item + 1] = arrayPtr[item]; // перестановка элементов массива
//             arrayPtr[item] = temp;
//             item--;
//         }
//     }
    
    
// }

void bobleSort(int* arr, int size, bool flag=1){
    
    
    
    for(int i = 0; i < size; ++i){
        for(int j = size - 1; j > i; --j){
            if(flag == 0){
                if(arr[j] > arr[j-1]){
                    int temp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = temp;
                }
            }else{
                if(arr[j] < arr[j-1]){
                    int temp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = temp;
                }
            }
        }
    }
}


int firstNegativelement(int arr[], int size){
    for(int i = 0; i < size; ++i){
        if(arr[i] < 0){
            return i;
        }
    }
    
    return -1;
}

int lastNegativelement(int arr[], int size){
    for(int i = size-1; i >= 0; --i){
        if(arr[i] < 0){
            return i;
        }
    }
    
    return -1;
}

void print(int arr[], int n){
    for(int i = 0; i < n; ++i){
        cout << arr[i] << " ";
    }
    cout << endl;
}

void randomize(int arr[], int size){
    for(int i = 0; i < size; ++i){
        arr[i] = (rand() % 41) - 20;
    }
}

void scatter(int arr[], int size){
    for(int i = 0; i < size; ++i){
        int m = rand() % size;
        int n = rand() % size;
        int temp = arr[m];
        arr[m] = arr[n];
        arr[n] = temp;
    }
}

int indexOf(int arr[], int size, int randomElement){
    
    for(int i = 0; i < size; ++i){
        if(arr[i] == randomElement){
            return i;
        }
    }
    
    return -1;
}


void mySort(int arr[], int size, int element){
    cout << "random = " << element << endl;
    int position = indexOf(arr, size, element);
    cout << "pos = " << position << endl;
    if(position == -1){
        cout << "элемент не существует!\n";
        return;
    }
    
    bobleSort(arr, position, 1);
    bobleSort(arr + position, size - position, 0);
}

int main()
{
    srand(time(0));
    const int size = 15;
    int arr[size]{0};
    randomize(arr, size);
    print(arr, size);
    
    mySort(arr, size, rand() % size);
    
    print(arr, size);
    
    //int random = rand() % size;
    // cout << "random = " << random << endl;
    // cout << "position = " << indexOf(arr, size, random);
    
    
    
    //scatter(arr, size);
    // int start = firstNegativelement(arr, size);
    // int end = lastNegativelement(arr, size);
    // bobleSort(arr + start, end - start + 1, 1);
    //print(arr, size);

    
    return 0;
}
