#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <time.h>
#include <ctime>
#include <windows.h>
using namespace std;

/*Заполнение массива пробелами*/
void filling_the_array(char(&arr)[10][10]);

/*Получает ячейку в виде строки, возвращает номер столбца*/
int get_column_number(char* cell);
    
/*Получает ячейку в виде строки, возвращает номер строки*/
int get_row_number(char* cell);

/*Для заполнения двухпалубных кораблей и больше*/
void filling_ships(char(&arr)[10][10], int column_number, int row_number, char direction, int ship_length);

/*Показывает содрежимое массивов в виде поля для морского боя*/
void show_fields(char(&user)[10][10], char(&computer)[10][10]);

/*Проверяет влезает ли корабль в поле,
учитывая выбранную ячейку и направление*/
bool correct_cell_input(int column_number, int row_number, char direction, int ship_length);

/*Заполняет ячейки вокруг кораблей звездочками*/
void filling_incorrect_cell(char(&arr)[10][10]);

/*Заполняет ячейки вокруг кораблей звездочками*/
void filling_incorrect_cell_2(char(&arr)[10][10]);

/*Проверяет не соприкасается и не наславиваетмся ли новый корабль с кораблями которые уже на поле */
bool correct_around_ship(char(&arr)[10][10], int row_number, int column_number, char direction, int ship_length);

/*Убирает звездочки*/
void unfilling_incorrect_cell(char(&arr)[10][10]);

/*Ручное заполнение поля кораблями*/
void the_arrangement_of_ships(char(&arr)[10][10]);

/*Автоматическое заполнение поля кораблями*/
void auto_arrangenment(char(&arr)[10][10]);

/*Проверяет попал ли выстрел в корабль или нет*/
bool is_hit(char(&arr)[10][10], int row_number, int column_number);

// проверяет убит корабль или нет
bool is_destoyed(char(&arr1)[10][10], char(&arr2)[10][10], int row_number, int column_number);

/*Проверяет проиграл уже кто-то или нет*/
int is_end_game(char(&user_field)[10][10], char(&computer_field_for_shooting)[10][10]);

/*Один выстрел пользователя*/
bool user_shot(char(&user_field)[10][10], char(&computer_field)[10][10], char(&computer_field_for_shooting)[10][10]);

/*Один выстрел компьютера*/
bool computer_shot(char(&user_field)[10][10], char(&computer_field_for_shooting)[10][10]);

/*Процесс перестрелки между двумя игроками*/
void shootig_process(char(&user_field)[10][10], char(&computer_field)[10][10], char(&computer_field_for_shooting)[10][10]);

/*Основная ф.ция которая вызывает все функции*/
void main_play(char(&user_field)[10][10], char(&computer_field)[10][10]);
    
    
const int field_size = 10;
char user_field[field_size][field_size];
char computer_field[field_size][field_size];


int main()
{
    setlocale(LC_ALL, "RU");
    srand(time(0));
    main_play(user_field, computer_field);
}


void filling_the_array(char(&arr)[10][10]) {
    /*Заполнение массива пробелами*/
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            arr[i][j] = ' ';
        }
    }
}


int get_column_number(char* cell) {
    /*Получает ячейку в виде строки, возвращает номер столбца*/

    int column_number;

    switch (cell[0]) {
    case('A'):
        column_number = 0;
        break;
    case('B'):
        column_number = 1;
        break;
    case('C'):
        column_number = 2;
        break;
    case('D'):
        column_number = 3;
        break;
    case('E'):
        column_number = 4;
        break;
    case('F'):
        column_number = 5;
        break;
    case('G'):
        column_number = 6;
        break;
    case('H'):
        column_number = 7;
        break;
    case('I'):
        column_number = 8;
        break;
    case('J'):
        column_number = 9;
        break;
    }
    return column_number;
}


int get_row_number(char* cell) {
    /*Получает ячейку в виде строки, возвращает номер строки*/

    int row_number;

    if (cell[2] == '0')
        return 9;

    switch (cell[1]) {
    case('1'):
        row_number = 0;
        break;
    case('2'):
        row_number = 1;
        break;
    case('3'):
        row_number = 2;
        break;
    case('4'):
        row_number = 3;
        break;
    case('5'):
        row_number = 4;
        break;
    case('6'):
        row_number = 5;
        break;
    case('7'):
        row_number = 6;
        break;
    case('8'):
        row_number = 7;
        break;
    case('9'):
        row_number = 8;
        break;
    }
    return row_number;
}


void filling_ships(char(&arr)[10][10], int column_number, int row_number, char direction, int ship_length) {
    /*Для заполнения двухпалубных кораблей и больше*/

    switch (direction) {
    case('<'):
        for (int i = 0; i < ship_length; i++) {
            arr[row_number][column_number + i] = '#';
        }
        break;
    case('>'):
        for (int i = 0; i < ship_length; i++) {
            arr[row_number][column_number - i] = '#';
        }
        break;
    case('^'):
        for (int i = 0; i < ship_length; i++) {
            arr[row_number + i][column_number] = '#';
        }
        break;
    case('!'):
        for (int i = 0; i < ship_length; i++) {
            arr[row_number - i][column_number] = '#';
        }
        break;
    }
}


void show_fields(char(&user)[10][10], char(&computer)[10][10]) {
    /*Показывает содрежимое массивов в виде поля для морского боя*/

    system("cls");
    cout << setw(55) << "Морской Бой." << endl;
    cout << setw(20) << " " << "  A B C D E F G H I J" << setw(15) << " " << "  A B C D E F G H I J" << endl;
    cout << setw(20) << " " << " ---------------------" << setw(15) << " " << "---------------------" << endl;
    for (int i = 0; i < 10; i++) {

        if (i < 9) cout << setw(18) << " " << i + 1 << ". |";
        else cout << setw(17) << " " << i + 1 << ". |";

        for (int j = 0; j < 10; j++) {
            cout << user[i][j] << "|";
        }

        if (i < 9) cout << setw(12) << " " << i + 1 << ". |";
        else cout << setw(11) << " " << i + 1 << ". |";

        for (int k = 0; k < 10; k++) {
            cout << computer[i][k] << "|";
        }
        cout << endl;
        cout << setw(20) << " " << " ---------------------" << setw(15) << " " << "---------------------" << endl;
    }
}


bool correct_cell_input(int column_number, int row_number, char direction, int ship_length) {
    /*Проверяет влезает ли корабль в поле,
    учитывая выбранную ячейку и направление*/

    if (row_number < ship_length - 1 and direction == '!'
        or 9 - row_number < ship_length - 1 and direction == '^'
        or column_number < ship_length - 1 and direction == '>'
        or 9 - column_number < ship_length - 1 and direction == '<') {
        return false;
    }
    else return true;
}


void filling_incorrect_cell(char(&arr)[10][10]) {
    /*Заполняет ячейки вокруг кораблей звездочками*/

    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (arr[i][j] == '#') {
                if (i != 0 and arr[i - 1][j] != '#') {
                    arr[i - 1][j] = '*';
                }
                if (i != 9 and arr[i + 1][j] != '#') {
                    arr[i + 1][j] = '*';
                }
                if (j != 0 and arr[i][j - 1] != '#') {
                    arr[i][j - 1] = '*';
                }
                if (j != 9 and arr[i][j + 1] != '#') {
                    arr[i][j + 1] = '*';
                }
            }
        }
    }
}


void filling_incorrect_cell_2(char(&arr)[10][10]) {
    /*Заполняет ячейки вокруг кораблей звездочками*/

    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (arr[i][j] == 'X') {
                if (i != 0 and arr[i - 1][j] != 'X') {
                    arr[i - 1][j] = '*';
                }
                if (i != 9 and arr[i + 1][j] != 'X') {
                    arr[i + 1][j] = '*';
                }
                if (j != 0 and arr[i][j - 1] != 'X') {
                    arr[i][j - 1] = '*';
                }
                if (j != 9 and arr[i][j + 1] != 'X') {
                    arr[i][j + 1] = '*';
                }
            }
        }
    }
}


bool correct_around_ship(char(&arr)[10][10], int row_number, int column_number, char direction, int ship_length) {
    /*Проверяет не соприкасается и не наславиваетмся ли новый корабль с кораблями которые уже на поле */


    switch (direction) {
    case('<'):
        for (int i = 0; i < ship_length; i++) {
            if (arr[row_number][column_number + i] == '*') {
                return false;
            }
        }
        break;

    case('>'):
        for (int i = 0; i < ship_length; i++) {
            if (arr[row_number][column_number - i] == '*') {
                return false;
            }
        }
        break;

    case('^'):
        for (int i = 0; i < ship_length; i++) {
            if (arr[row_number + i][column_number] == '*') {
                return false;
            }
        }
        break;

    case('!'):
        for (int i = 0; i < ship_length; i++) {
            if (arr[row_number - i][column_number] == '*') {
                return false;
            }
        }
        break;
    }
    return true;
}

void unfilling_incorrect_cell(char(&arr)[10][10]) {
    /*Убирает звездочки*/

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (arr[i][j] == '*') {
                arr[i][j] = ' ';
            }
        }
    }
}


void the_arrangement_of_ships(char(&arr)[10][10]) {
    /*Ручное заполнение поля кораблями*/

    // принимает координаты ячейки
    char cell[3];
    // направление корабля
    char direction;
    int column_number;
    int row_number;

    system("cls");
    show_fields(user_field, computer_field);
    cout << "Расстоновка кораблей" << endl;
    cout << "Вы будете вводить ячейку расположения корабля и его направление" << endl;
    cout << "Расстановка начинается с четырехпалубного корабля и заканчивается однопалубными" << endl;

    for (int i = 0; i < 10; i++) {
        cout << "Введите ячейку в которую хотите поставить корабль: ";
        cin >> cell;
        if (i < 6) {
            cout << "Введите направление корабля \n'<' - направлен влево\n'>' - направлен вправо\n'^' - направлен вверх\n'!' - направлени вниз\n :";
            cin >> direction;
        }
        column_number = get_column_number(cell);
        row_number = get_row_number(cell);

        // Ставим четырехпалубный
        if (i == 0) {
            bool ship_length_is_okay = correct_cell_input(column_number, row_number, direction, 4);
            bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 4);
            if (ship_length_is_okay and around_ship_is_good) NULL;
            else {
                --i;
                cout << "Выберите другую ячейку\nТак поставить корабль нельзя." << endl;
                continue;
            }

            filling_ships(arr, column_number, row_number, direction, 4);
            filling_incorrect_cell(arr);
            system("cls");
            show_fields(arr, computer_field);
        }
        // Ставим 2 трехпалубных
        else if (i < 3) {
            bool ship_length_is_okay = correct_cell_input(column_number, row_number, direction, 3);
            bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 3);
            if (ship_length_is_okay and around_ship_is_good) NULL;
            else {
                --i;
                cout << "Выберите другую ячейку\nТак поставить корабль нельзя." << endl;
                continue;
            }
            filling_ships(arr, column_number, row_number, direction, 3);
            filling_incorrect_cell(arr);
            system("cls");
            show_fields(arr, computer_field);
        }
        // Ставим 3 двухпалубных
        else if (i < 6) {
            bool ship_length_is_okay = correct_cell_input(column_number, row_number, direction, 2);
            bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 2);
            if (ship_length_is_okay and around_ship_is_good) NULL;
            else {
                --i;
                cout << "Выберите другую ячейку\nТак поставить корабль нельзя." << endl;
                continue;
            }
            filling_ships(arr, column_number, row_number, direction, 2);
            filling_incorrect_cell(arr);
            system("cls");
            show_fields(arr, computer_field);
        }
        // Ставим 4 однопалубных
        else {
            bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 1);
            if (around_ship_is_good) NULL;
            else {
                --i;
                cout << "Выберите другую ячейку\nТак поставить корабль нельзя." << endl;
                continue;
            }
            filling_ships(arr, column_number, row_number, direction, 1);
            filling_incorrect_cell(arr);
            system("cls");
            show_fields(arr, computer_field);
        }
    }
}


void auto_arrangenment(char(&arr)[10][10]) {
    /*Автоматическое заполнение поля кораблями*/

    cout << "Стартовала ф.ция авто расстановки" << endl;
    srand(rand() % 100);
    bool flag = false;
    int column_number, row_number, direction_choice;
    char direction;

    // Цикл будет работать до тех пор пока не будет сделана корректная расстановка всех кораблей
    while (!flag) {
        // Цикл 10 раз потому что надо поставить 10 кораблей
        for (int i = 0; i < 10; ++i) {

            column_number = rand() % 10;
            row_number = rand() % 10;
            direction_choice = rand() % 4;

            if (arr[row_number][column_number] == '#') {
                --i;
                continue;
            }

            switch (direction_choice) {
            case(0):
                direction = '<';
                break;
            case(1):
                direction = '>';
                break;
            case(2):
                direction = '^';
                break;
            case(3):
                direction = '!';
                break;
            }

            // Ставим четырехпалубный
            if (i == 0) {
                bool ship_length_is_okay = correct_cell_input(column_number, row_number, direction, 4);
                bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 4);
                if (ship_length_is_okay and around_ship_is_good) NULL;
                else {
                    --i;
                    continue;
                }
                filling_ships(arr, column_number, row_number, direction, 4);
                filling_incorrect_cell(arr);
            }
            // Ставим трехпалубные
            else if (i < 3) {
                bool ship_length_is_okay = correct_cell_input(column_number, row_number, direction, 3);
                bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 3);
                if (ship_length_is_okay and around_ship_is_good) NULL;
                else {
                    --i;
                    continue;
                }
                filling_ships(arr, column_number, row_number, direction, 3);
                filling_incorrect_cell(arr);
            }
            // Ставим двухпалубные
            else if (i < 6) {
                bool ship_length_is_okay = correct_cell_input(column_number, row_number, direction, 2);
                bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 2);
                if (ship_length_is_okay and around_ship_is_good) NULL;
                else {
                    --i;
                    continue;
                }
                filling_ships(arr, column_number, row_number, direction, 2);
                filling_incorrect_cell(arr);
            }

            // Ставим однопалубные
            else {
                bool around_ship_is_good = correct_around_ship(arr, row_number, column_number, direction, 1);
                if (around_ship_is_good) NULL;
                else {
                    --i;
                    continue;
                }
                filling_ships(arr, column_number, row_number, direction, 1);
                filling_incorrect_cell(arr);
            }
        }
        flag = true;
    }
}


bool is_hit(char(&arr)[10][10], int row_number, int column_number) {
    /*Проверяет попал ли выстрел в корабль или нет*/

    if (arr[row_number][column_number] == '#') {
        return true;
    }
    else {
        return false;
    }
}


bool is_destoyed(char(&arr1)[10][10], char(&arr2)[10][10], int row_number, int column_number) {
    // проверяет убит корабль или нет
    // arr1  - поле с кораблями
    // arr2  - поле для игры

    if (arr1[row_number + 1][column_number] == '#' and arr2[row_number + 1][column_number] != 'X'
        or arr1[row_number - 1][column_number] == '#' and arr2[row_number - 1][column_number] != 'X'
        or arr1[row_number][column_number + 1] == '#' and arr2[row_number][column_number + 1] != 'X'
        or arr1[row_number][column_number - 1] == '#' and arr2[row_number][column_number - 1] != 'X') {
        return false;
    }
    else {
        return true;
    }
}


int is_end_game(char(&user_field)[10][10], char(&computer_field_for_shooting)[10][10]) {
    /*Проверяет проиграл уже кто-то или нет*/

    int user_count = 0, computer_count = 0;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (user_field[i][j] == 'X') {
                user_count += 1;
            }
            if (computer_field_for_shooting[i][j] == 'X') {
                computer_count += 1;
            }
        }
    }
    if (user_count == 20) {
        cout << "Игра окончена." << endl;
        cout << "Победил компьютер" << endl;
        return 2;
    }
    else if (computer_count == 20) {
        cout << "Игра окончена." << endl;
        cout << "Вы победили!" << endl;
        return 1;
    }
    else return 0;
}


bool user_shot(char(&user_field)[10][10], char(&computer_field)[10][10], char(&computer_field_for_shooting)[10][10]) {
    /*Один выстрел юзера*/

    bool hit, destroy; // попадание
    int row_number, column_number;
    char cell[3];
    cout << "Ваш ход" << endl;
    cout << "Введите ячейку: ";
    cin >> cell;
    row_number = get_row_number(cell);
    column_number = get_column_number(cell);
    hit = is_hit(computer_field, row_number, column_number);
    if (hit) {
        computer_field_for_shooting[row_number][column_number] = 'X';
        system("cls");
        show_fields(user_field, computer_field_for_shooting);
        cout << "Есть попадание!" << endl;
        Sleep(1000);
        destroy = is_destoyed(computer_field, computer_field_for_shooting, row_number, column_number);
        if (destroy) {
            filling_incorrect_cell_2(computer_field_for_shooting);
            system("cls");
            show_fields(user_field, computer_field_for_shooting);
            cout << "Корабль убит!" << endl;
            Sleep(1000);
            return true;
        }
        // корабль не убит        
        else {
            return true;
        }
    }
    // попадание мимо
    else {
        computer_field_for_shooting[row_number][column_number] = '*';
        system("cls");
        show_fields(user_field, computer_field_for_shooting);
        cout << "Промах(" << endl;
        Sleep(1000);
        return false;
    }
}


bool computer_shot(char(&user_field)[10][10], char(&computer_field_for_shooting)[10][10]) {
    /*Один выстрел компьютера*/

    bool hit, flag = true; // попадание
    int row_number, column_number;
    while (flag) {
        row_number = rand() % 10;
        column_number = rand() % 10;
        if (user_field[row_number][column_number] != '*' and user_field[row_number][column_number] != 'X') {
            flag = false;
        }
    }
    hit = is_hit(user_field, row_number, column_number);
    if (hit) {
        user_field[row_number][column_number] = 'X';
        system("cls");
        show_fields(user_field, computer_field_for_shooting);
        cout << "Компьютер попал!" << endl;
        Sleep(1000);
        return true;
    }
    else {
        user_field[row_number][column_number] = '*';
        system("cls");
        show_fields(user_field, computer_field_for_shooting);
        cout << "Компьютер промахнулся" << endl;
        Sleep(1000);
        return false;
    }
}


void shootig_process(char(&user_field)[10][10], char(&computer_field)[10][10], char(&computer_field_for_shooting)[10][10]) {
    /*Процесс перестрелки между двумя игроками*/

    int end_game = 0;
    int iteration_count = 0;
    char cell[3];
    int column_number, row_number;
    while (!end_game) {
        if (iteration_count > 19) {
            // нужна проверка на конец игры, кто-то уже мог победить
            end_game = is_end_game(user_field, computer_field_for_shooting);
        }
        // Ходит Юзер
        bool shot = true;// стрелять еще или нет
        while (shot) {
            shot = user_shot(user_field, computer_field, computer_field_for_shooting);
        }

        // Ходит компьютер
        shot = true;
        cout << "Компьютер делает свой ход" << endl;
        while (shot) {
            shot = computer_shot(user_field, computer_field_for_shooting);
        }
    }
    ++iteration_count;
}


void main_play(char(&user_field)[10][10], char(&computer_field)[10][10]) {
    /*Основная ф.ция которая вызывает все функции*/

    srand(time(0));
    cout << "Добро пожаловать в игру Морской Бой!" << endl;
    Sleep(1000);
    filling_the_array(user_field);
    filling_the_array(computer_field);
    show_fields(user_field, computer_field);
    cout << "Выберите режим для игры:" << endl;
    int choice;
    cout << "Человек - компьютер - 1\nКомпьютер - компьютер - 2\n";
    cin >> choice;

    // Режим игры Человек - компьютер
    if (choice == 1) {
        system("cls");
        show_fields(user_field, computer_field);
        cout << "Выберите режим расстановки кораблей: " << endl;
        cout << "Ручная расстановка - 1\nАвтоматическая расстановка - 2\n";
        cin >> choice;
        if (choice == 1) {
            // Ручная расстановка
            the_arrangement_of_ships(user_field);
        }
        else {
            // Автоматическая расстановка игрока
            cout << "Начинается расстановка" << endl;
            auto_arrangenment(user_field);
            cout << "Расстановка завершена" << endl;
        }
        // расстановка компьютера
        cout << "Компьютер расставляет корабли..." << endl;
        Sleep(1000);
        cout << "Почти готово..." << endl;
        Sleep(2000);
        auto_arrangenment(computer_field);
        unfilling_incorrect_cell(user_field);
        unfilling_incorrect_cell(computer_field);
        // создаем второй массив для компьютера (игровой)
        char computer_field_for_shooting[10][10];
        // заполняем игровой игровой массив компьютера пробелами
        filling_the_array(computer_field_for_shooting);

        //show_fields(user_field, computer_field_for_shooting);
        show_fields(user_field, computer_field_for_shooting);
        shootig_process(user_field, computer_field, computer_field_for_shooting);

    }

    // Режим игры Компьютер - Компьютер
}