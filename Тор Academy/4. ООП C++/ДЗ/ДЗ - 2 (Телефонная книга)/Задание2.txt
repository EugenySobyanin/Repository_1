#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstring>
#include <string>
#include <fstream>

using namespace std;

// Задание телефонная книга.


class Abonent {
    /*Класс обдного абонента (контакта в телефонной книге).*/

    char* _fullname{ nullptr };
    char* _telephone{ nullptr };
    char* _info{ nullptr };

public:

    Abonent(const char* fullname, const char* telephone, const char* info = "") :
        _fullname(new char[strlen(fullname) + 1]),
        _telephone(new char[strlen(telephone) + 1]),
        _info(new char[strlen(info) + 1])
    {
        strcpy(_fullname, fullname);
        strcpy(_telephone, telephone);
        strcpy(_info, info);
    }

    Abonent() {}

    // С деструктором почему-то не работает.
    //~Abonent() {
    //    delete[] _fullname;
    //    delete[] _telephone;
    //    delete[] _info;
    //}

    void showContact() {
        /*Вывод данных об отдельном абоненте.*/
        cout << _fullname << "- " << _telephone << " ";
        int end = strlen(_info) < 15 ? strlen(_info) : 15;
        for (int i = 0; i < end; i++) {
            cout << _info[i];
        }
        cout << endl;
    }

    const char* getFullname() { return _fullname; }
    const char* getTelephone() { return _telephone; }
    const char* getInfo() { return _info; }

    void setFullname(const char* fullname)
    {
        _fullname = new char[100];
        strcpy(_fullname, fullname);
        _fullname[strlen(fullname)] = '\0';
    }
};


class TelephoneBook {
    /*Класс хранит массив абонентов.*/

private:
    int size = 0;
    int cap = 20;
    Abonent* abonentList = new Abonent[cap];

public:

     int getSize() {
        return size;
     }

     Abonent getAbonent(int indx) {
         return abonentList[indx];
     }


    void addAbonent(Abonent contact) {
        /*Добавить объект класса Abonent*/
        if (size == cap)
            cap *= 2;
        abonentList[size] = contact;
        size++;
    }

    void showBook() {
        /*Вывести данные обо всех абонентах.*/
        for (int i = 0; i < size; i++) {
            abonentList[i].showContact();
        }
    }

    bool comparison(const char* a, const char* b) {
        /*Сравнение двух строк.*/
        for (int i = 0; i < strlen(a); i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    void findAbonent(const char* find_name) {
        /*Найти абонента по ФИО.*/
        for (int i = 0; i < size; i++) {
            const char* full_name = abonentList[i].getFullname();
            if (this->comparison(find_name, full_name)) {
                abonentList[i].showContact();
                return;
            }
        }
        cout << "абонент с именем" << find_name << "не найден." << endl;
    }

    void delAbonent(const char* name) {
        /*Удалить абонента.*/
        for (int i = 0; i < size; i++) {
            if (this->comparison(name, abonentList[i].getFullname())) {
                for (int j = i; j < size - 1; j++) {
                    abonentList[j] = abonentList[j + 1];
                }
                size--;
                return;
            }
        }
        cout << "Контатка " << name << " в базе нет." << endl;
    }
};


void show_menu() {
    cout << "Показать список всех абонентов\t- нажмите 1" << endl;
    cout << "Добавить абонента\t\t- нажмите 2" << endl;
    cout << "Удалить абонента\t\t- нажмите 3" << endl;
    cout << "Найти абонента по ФИО\t\t- нажмите 4" << endl;
    cout << "Записать данные в файл\t\t- нажмите 5" << endl;
    cout << "Завершить программу\t\t- нажмите 6" << endl;
}


void main_func(TelephoneBook& main_book) {
    /*Обеспечивает взаимодействие с пользователем.*/

    show_menu();
    int choice = 1;
    while (choice) {
        cout << endl << "Ввод: ";
        cin >> choice;

        if (choice == 1) {  // список всех абонентов
            main_book.showBook();
        }
        else if (choice == 2) {  // добавить абонента
            char new_fullname[30];
            char number[15];
            char info[50];
            cout << "Введите имя: ";
            cin.ignore();
            cin.getline(new_fullname, 30);
            cout << "Введите номер: ";
            cin.getline(number, 15);
            cout << "Добавить доп.информацию?" << endl;
            cout << "Да - 1" << endl << "Нет - 2" << endl;
            cin >> choice;
            cin.ignore();
            if (choice == 1) {
                cin.getline(info, 50);
                Abonent new_abonent(new_fullname, number, info);
                main_book.addAbonent(new_abonent);
            }
            else {
                Abonent new_abonent(new_fullname, number);
                main_book.addAbonent(new_abonent);
            }
        }
        else if (choice == 3) {  // удалить абонента
            char del_name[30];
            cout << "Введите имя абонента: ";
            cin.ignore();
            cin.getline(del_name, 30);
            main_book.delAbonent(del_name);
        }
        else if (choice == 4) {  // найти абонента
            char find_name[30];
            cout << "Введите имя: ";
            cin.ignore();
            cin.getline(find_name, 30);
            main_book.findAbonent(find_name);
        }
        else if (choice == 5) {  // записать данные в файл
            ofstream file("telephone_number.txt");
            for (int i = 0; i < main_book.getSize(); i++) {
                file << main_book.getAbonent(i).getFullname() << " "
                     << main_book.getAbonent(i).getTelephone() << " "
                     << main_book.getAbonent(i).getInfo() << "\n";
            }
        }
        else if (choice == 6) {  // завершить программу
            choice = 0;
        }
    }
    cout << "Завершение программы." << endl;
}


int main() {
    setlocale(LC_ALL, "RU");

    TelephoneBook main_book;
    Abonent obj1("Sobyanin E.A.", "89040006789");
    Abonent obj2 = { "Marat", "890001112233", "Риэлтор" };
    Abonent obj3 = { "Norman", "9999", "friend" };
    Abonent obj4 = { "Alise", "55555", "girl" };
    main_book.addAbonent(obj1);
    main_book.addAbonent(obj2);
    main_book.addAbonent(obj3);
    main_book.addAbonent(obj4);

    main_func(main_book);
}
