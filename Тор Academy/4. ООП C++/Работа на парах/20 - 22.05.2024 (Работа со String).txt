#include <iostream>
#include <string.h>
#include <string>
using namespace std;

// Строки String

// Задача 1
std::string intToRoman(int num) {
    const int values[] =          { 1000, 900,  500, 400,  100, 90,   50,   40,  10,   9,    5,   4,    1 };
    const std::string symbols[] = { "M",  "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };

    std::string roman = "";

    cout << sizeof(values) << endl;
    cout << sizeof(values[0]) << endl;

    for (int i = 0; i < sizeof(values) / sizeof(values[0]); ++i) {
        while (num >= values[i]) {
            roman += symbols[i];
            num -= values[i];
        }
    }

    return roman;
}


// Задача 2

void delname(string& path) {
    int start = path.rfind("/");
    path = path.substr(0, start);
}

void lastdir(string& path) {
    int start = path.rfind("/");
    int end = path.rfind("/", start - 1) + 1;
    path = path.substr(end, start - end);
}

void filename(string& path) {
    int start = path.rfind("/");
    path = path.substr(start+1);
}

void file_expansion(string& path) {
    int start = path.rfind(".");
    path = path.substr(start);
}

void file_without_expansion(string& path) {
    int start = path.rfind("/");
    int end = path.rfind(".");
    path = path.substr(start + 1, end - start -1);
}


void url_cut(string& path, char c) {
    switch (c) {
    case'a':
        delname(path);
        break;
    case'b':
        lastdir(path);
        break;
    case'c':
        filename(path);
        break;
    case'd':
        file_expansion(path);
        break;
    case'e':
        file_without_expansion(path);
        break;
    }
}


int main() {
    setlocale(LC_ALL, "RU");

    //Задача 1
    /*std::string inputStr;
    std::cout << "Введите число в формате string: ";
    std::cin >> inputStr;

    int num = std::stoi(inputStr);

    std::string romanNum = intToRoman(num);

    std::cout << "Римское число: " << romanNum << std::endl;

    return 0;*/


    // Задача 2
    string s = "D/home/max/detail.html";
    //url_cut(s, 'a');
    //url_cut(s, 'b');
    //url_cut(s, 'c');
    //url_cut(s, 'd');
    url_cut(s, 'e');
    cout << s;
}
