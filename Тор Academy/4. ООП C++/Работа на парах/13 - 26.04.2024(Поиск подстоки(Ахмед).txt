#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cmath>
#include <string>

class Date {

    int countMonth() const {
        int sum = 0;
        for (int i = 0; i < this->month; ++i) {
            switch (i + 1)
            {
            case 1:
                sum += 31;
                break;
            case 2:
                sum += (this->year % 4 == 0 ? 29 : 28);
                break;
            case 3:
                sum += 31;
                break;
            case 4:
                sum += 30;
                break;
            case 5:
                sum += 31;
                break;
            case 6:
                sum += 30;
                break;
            case 7:
                sum += 31;
                break;
            case 8:
                sum += 31;
                break;
            case 9:
                sum += 30;
                break;
            case 10:
                sum += 31;
                break;
            case 11:
                sum += 30;
                break;
            case 12:
                sum += 31;
                break;
            }
        }

        return sum;
    }

public:


    Date(int d, int m, int y) : day(d), month(m), year(y)
    {}

    friend Date operator-(const Date& d1, const Date& d2) {

        long long result = abs(d1.day + d1.countMonth() + d1.year * 365 -
            d2.day - d2.countMonth() - d2.year * 365);

        return Date(result % 30, (result / 12) % 12 + 1, result / 365);
    }

    Date& operator+=(int days) {
        this->day += days;
        this->month += (day / 30);
        day %= 30;
        return *this;
    }

    friend std::ostream& operator<<(std::ostream& out, const Date& dt) {

        out << dt.day << "." << dt.month << "." << dt.year << "\n";

        return out;
    }


private:
    int day;
    int month;
    int year;
};

class String {
public:

    String(const char* s) : cap(strlen(s)), size(cap), str(new char[cap+1]) {
        strcpy(str, s);
        str[size] = '\0';
    }

    String() : cap(0), size(0), str(nullptr)
    {}

    String& operator+=(char c) {
        
        if (size == cap) {
            this->cap = (cap == 0) ? 8 : (cap<<1);
            char* tmp = new char[cap + 1];
            if(str != nullptr)
                strcpy(tmp, str);

            delete[] str;
            str = tmp;
        }

        str[size++] = c;

        return *this;
    }

    char& operator[](int index) {
        return this->str[index];
    }

    char operator[](int index) const {
        return this->str[index];
    }

    friend std::ostream& operator<<(std::ostream& out, const String& s) {

        for (int i = 0; i < s.size; ++i) {
            out << s[i];
        }

        return out;
    }

    bool isValue(char c) {
        for (int i = 0; i < size; ++i) {
            if (this->str[i] == c) {
                return true;
            }
        }

        return false;
    }

    friend String operator&&(const String& s1, const String& s2) { 
        String tmp;
        for (size_t i = 0; i < s1.size; i++) {

            for (size_t j = 0; j < s2.size; j++)
            {
                if (s1[i] == s2[j]) {
                    tmp += s1[i];
                    break;
                }
            }
        }

        return tmp;
    }

private:
    int cap;
    int size;
    char* str;
};



int main()
{
    String s("hello"), s2("asdelldgt");

    
    std::cout << (s && s2);

    //Date dt(26, 4, 2024), dt2(15, 5, 2000);
    //dt += 10;
    //std::cout << dt;
    //Date dt3 = dt - dt2;
    //std::cout << dt3;

    //Date d4(dt2);

}
