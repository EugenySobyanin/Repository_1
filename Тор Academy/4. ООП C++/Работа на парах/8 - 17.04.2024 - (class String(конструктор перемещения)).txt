#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

// класс стринг

class String {
private:
    int cap;
    int size;
    char* str;
public:
    String(const char* word) : cap(strlen(word) + 1), size(strlen(word)), str(new char[size]) {
        strcpy(str, word);
    }
    String() : String("") 
    {
        delete[] str;
    }

    // конструктор копирования
    String(const String& obj) {
        this->cap = obj.cap;
        this->size = obj.size;
        this->str = new char[this->size];
        strcpy(str, obj.str);
    }

    // конструктор перемещения
    String(String&& obj) : cap(obj.cap), size(obj.size), str(obj.str) {

        obj.str = nullptr;
        obj.cap = 0;
        obj.size = 0;
    }


    //~деструктор
    ~String() {

    }

    // перегрузка оператора +
    String& operator+(const String& obj) {
        this->cap = this->cap + obj.cap;
        this->size = this->size + obj.size;
        strcat(this->str, obj.str);
        return *this;
    }

    // перегрузка оператора вывода
    friend ostream& operator<<(ostream& out, const String& obj) {
        out << obj.str;
        out << endl;
        return out;
    }

    // перегрузка оператора присваивания через копирование
    // перегрузка оператора присваивания через перемещение


    // метод lower()
    String& lower() {
        int i = 0;
        while (this->str[i] != '\0') {
            if (this->str[i] > 64 and this->str[i] < 91) {
                this->str[i] += 32;
            }
            ++i;
        }
        return *this;
    }

    // метод upper()
    String& upper() {
        int i = 0;
        while (this->str[i] != '\0') {
            if (this->str[i] > 96 and this->str[i] < 123) {
                this->str[i] -= 32;
            }
            ++i;
        }
        return *this;
    }



};

int main()
{
    String obj1("Kfljkljlkej");
    //cout << obj1;

    //String obj2(obj1);

    String obj2("aaaaaaaaaaaaA");
    cout << obj1 + obj2;
    cout << obj1;

    String obj3("HELLO, WORLD!");
    cout << obj3.lower();
    cout << obj3.upper();

    /*cout << (int)('A') << endl;
    cout << (int)('a') << endl;
    cout << (int)('z') << endl;*/



    //String obj2;
}
