#include <iostream>
using namespace std;

//// Указатели.
// Указатель - это переменная, содержащая адрес другой переменной.
// Унарная операция & - выдает адрес объекта.
/*Унарная операция * -рассматривает свой операнд как адрес конечной цели 
и обращается по этому адресу, чтобы извлечь содержимое*/

// Имя массива является указателем на его нулевой элемент
// Имя массива - это адрес нулевого эл.та массива

// Существую нулевые указатели

// Константный указатель - это указатель, чье значение нельзя менять после инициализации.
/*Это значит, что указатель в процессе своей жизни может указывать только на
одну ячейку памяти и его нельзя перенаправить на другой адрес.
Но значение в этой ячейке можно поменять!*/  

// Указатель на константу не позволяет менять значение по этому адресу
// В процессе работы его можно перенаправлять на разные адреса!
// Главное правило: через него нельзя изменять значение на которое оно указывает



// подсчет суммы элементов массива
int GetSum(int* arr, int size)
{
	int sum = 0;
	for (int i = 0; i < size; i++, arr++)
	{
		sum += *arr;
	}
	return sum;
}


// передача указателей в функцию. Функция которая меняет значения переменных
void mySwap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}


int main()
{
	setlocale(LC_ALL, "RU");

	// Простейшие операции с указателями и переменными
	int a = 10;
	int* px = &a;
	cout << "Что лежит в указателе? - " << px << endl;
	cout << "Разыименовываем - " << *px << endl;
	int y = *px + 1;
	cout << "y = " << y << " a = " << a << endl;

	*px = 100;
	cout << "Смотрим, что стало с а: " << a << endl;

	int* py;
	py = px;
	cout << "Адрес который лежить в px: " << px << endl;
	cout << "Адрес который лежить в py: " << py << endl;


	// Указатели и массивы
	int nums[5] = { 10, 15, 35, 65, 100 };
	int* ptr_1;
	ptr_1 = &nums[0]; // указатель указывает на первый элемент массива
	cout << "Выводим адрес: " << ptr_1 << " Выводим значение: " << ptr_1 << endl;

	// арифметика указателей
	cout << "Первый эл.т массива: " << *ptr_1 << endl;
	cout << "Второй эл.т массива: " << *(ptr_1 + 1) << endl;
	cout << "Пятый эл.т массива: " << *(ptr_1 + 4) << endl;

	// применяем функцию подсчета эл.тов массива
	cout << "В массиве nums: " << GetSum(nums, 5) << " сумма элементов" << endl;

	// применяем функцию mySwap
	int num_1 = 100, num_2 = 7;
	mySwap(&num_1, &num_2);
	cout << "num_1 = " << num_1 << " num_2 = " << num_2 << endl;


	// 3 способа создать нулевый указатель
	
	// 1ый способ
	int* ptr = 0;
	//cout << "При первом способе выводится значение: " <<  *ptr << endl; // вызывается ошибка
	cout << "При первом способе выводится адрес: " << ptr << endl;
	if (ptr == 0)
	{
		cout << "ptr == 0" << endl;
	}


	// 2ой способ
	int* ptr_2 = NULL;
	//cout << "При втором способе выводится значение: " <<  *ptr_2 << endl; // вызывается ошибка
	cout << "При втором способе выводится адрес: " << ptr_2 << endl;
	if (ptr_2 == NULL)
	{
		cout << "ptr_2 == NULL" << endl;
	}

	// 3ий способ (самый норм)
	int* ptr_3 = nullptr;
	//cout << "При третьем способе выводится значение: " <<  *ptr_3 << endl; // вызывается ошибка
	cout << "При третьем способе выводится адрес: " << ptr_3 << endl;
	if (ptr_3 == nullptr)
	{
		cout << "ptr_3 == nullptr" << endl;
	}

	// константный указатель
	int z = 12;
	// такой указатель нельзя перенаправить на другой адрес, но можно менять значение по этому адресу
	int* const ptr_4 = &z;
	cout << "ptr_4 = " << *ptr_4 << " z = " << z << endl;
	//int* const ptr_4;      //такая инициализация приведет к ошибке
	*ptr_4 = 125;
	cout << "Изменяем значение константного указателя: " << *ptr_4 << endl;


	// указатель на константу
	int w = 72;
	const int* ptr_5;
	ptr_5 = &w;
	cout << "Константный указатель на значение: " << *ptr_5 << endl;

	int u = 50;
	ptr_5 = &u;
	cout << "Константный указатель на значение(после присвоения другого значения): " << *ptr_5 << endl;
	//*ptr_5 = 100;  // так делать нельзя 

}
