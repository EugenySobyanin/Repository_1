#include <iostream>
#include <time.h>


template<typename T>
void print(T* arr, int size) {
	for (int i = 0; i < size; i++) {
		std::cout << *(arr + i) << " ";
	}
	std::cout << std::endl;
}



template<typename T>
float max_element(T* el_1, T* el_2);

template<typename T>
char plus_or_minus(T* el_1);

template<typename T>
void change_two_elements(T* el_1, T* el_2);

template<typename T, typename U>
float calculator(T* num_1, T* num_2, U* symbol);

template<typename T>
float sum_el_in_massive(T* arr, int len);

template<typename T>
bool is_el_in_massive(T* arr, int len, T key);

template<typename T>
void gen_intersection_massive(T* A, T* B, T* C, int size1, int size2, int size3);

//template<typename T>
//int get_massive_with_user_comand(T* arr, int size, bool flag);

template<typename T>
void swap_el(T &a, T &b) {
	T tmp = a;
	a = b;
	b = tmp;
}






int main()
{
	using namespace std;
	srand(time(0));
	setlocale(LC_ALL, "RU");

	float a = 80, b = 90.8;
	cout << max_element(&a, &b) << endl;
	cout << plus_or_minus(&a) << endl;
	change_two_elements(&a, &b);
	cout << "a = " << a << " , b = " << b << endl;
	int num_1 = 10, num_2 = 7;
	char c = '/';
	cout << calculator(&num_1, &num_2, &c);
	const int len = 10;
	const int len_2 = 5;
	const int len_3 = len_2;
	int arr_1[len]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int arr_2[len_2]{ 8, 11, 12, 9, 7 };
	int arr_3[len_2]{ 0 };
	cout << endl << sum_el_in_massive(arr_1, len) << endl;
	gen_intersection_massive(arr_1, arr_2, arr_3, len, len_2, len_3);
	print(arr_3, len_3);
	//const int m = 10;
	//int arr_5[m]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	//cout << "Какие элементы вы хотите удалить?" << endl;
	//cout << "\t1 - четные" << endl;
	//cout << "\t2 - нечетные" << endl;
	//bool flag;
	//cin >> flag;
	//const int size = get_massive_with_user_comand(arr_5, m, flag);
	//print(arr_5, size);

	int r = 10;
	int& ref = r;
	ref = 20;
	r = 30;
	cout << ref << endl;
	int h = 10, t = 20;
	swap_el(h, t);
	cout << h << " " << t << endl;




	



}

template<typename T>
float max_element(T* el_1, T* el_2) {
	if (*el_1 > *el_2) {
		return *el_1;
	}
	else return *el_2;
}

template<typename T>
char plus_or_minus(T* el_1) {
	if (*el_1 > 0) return '+';
	else if (*el_1 < 0) return '-';
	else return 0;
}

template<typename T>
void change_two_elements(T* el_1, T* el_2) {
	int temp;
	temp = *el_1;
	*el_1 = *el_2;
	*el_2 = temp;
}

template<typename T, typename U>
float calculator(T* num_1, T* num_2, U* symbol) {
	switch (*symbol)
	{
	    case('+'):
			return *num_1 + *num_2;
			break;
		case('-'):
			return *num_1 - *num_2;
			break;
		case('*'):
			return *num_1 * *num_2;
			break;
		case('/'):
			return float(*num_1) / float(*num_2);
			break;
	    default:
			std::cout << "Некорректный знак операции." << std::endl;
		    break;
	}
	return 0.0;
}

template<typename T>
float sum_el_in_massive(T* arr, int len) {
	T result = 0;
	for (int i = 0; i < len; i++) {
		result += *(arr + i);

	}
	return result;
}

template<typename T>
bool is_el_in_massive(T* arr, int len, T key) {
	for (int i = 0; i < len; i++) {
		if (*(arr + i) == key) {
			return true;
		}
	}
	return false;
}

template<typename T>
void gen_intersection_massive(T* A, T* B, T* C, int size1, int size2, int size3) {
	int k = 0;
	for (int i = 0; i < size1; ++i) {
		int isElem = is_el_in_massive(B, size2, *(A + i));
		if (isElem) {
			isElem = is_el_in_massive(C, size3, *(A + i));
			if (!isElem) {
				*(C + k++) = *(A + i);
			}
		}
	}
}

//template<typename T>
//int get_massive_with_user_comand(T* arr, const int &size, bool flag) {
//
//	T arr2[size]{ 0 };
//	int k = 0;
//
//	for (int i = 0; i < size; ++i) {
//		if (flag == true) {
//			if (arr[i] % 2 != 0) {
//				*(arr2 + k++) = *(arr + i);
//			}
//		}
//		else {
//			if (*(arr + i) % 2 == 0) {
//				*(arr2 + k++) = *(arr + i);
//			}
//		}
//	}
//	for (int i = 0; i < size; ++i) {
//		*(arr + i) = *(arr2 + i);
//	}
//	return k;
//}