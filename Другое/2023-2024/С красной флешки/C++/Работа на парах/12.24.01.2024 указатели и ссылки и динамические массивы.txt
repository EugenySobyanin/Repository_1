#include <iostream>
using namespace std;

void swap_2(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

void randomizer_2(int* arr, int size) {    ////// заполняет массив 
    for (int i = 0; i < size; ++i) {
        arr[i] = rand() % 10;
    }
}

void print(int* arr, int size) {          ////////   выводит массив на экран
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

int* creatArr(int size) {                 ///////// выделяет место под массив
    return new int[size];
}
template<typename T>
T* in_massive(int* arr, T size, T element) {      ///////// проверяет есть ли элемент в массиве
    for (int i = 0; i < size; i++) {
        if (*(arr + i) == element) {
            return arr + i;
        }
    }
    return false;
}


template<typename T>                             //////// реалокация списка
void relloc(T* &arr, int size, int newsize) {
    if (size = newsize) {
        return;
    }
    T* newArr = new T[size];
    T sz = newsize < size ? newsize : size;
    for (int i = 0; i < sz; ++i) {
        newArr[i] = arr[i];
    }
    delete[] arr;
    arr = newArr;
}

template<typename T>
T* cut_massive(T* A, T* B,  T &size1, T size2) {

    int* C = new int[size1];
    int k = 0;
    for (int i = 0; i < size1; i++) {
        bool in_masss = in_massive(A, size1, *(B + i));
        if (!in_massive(B, size1, A[i])) {
            if (!in_massive (C, size1, A[i])){
                C[k++] = A[i];
            }
            
        }
    }

    if (k != size1) {
        relloc(C, size1, k);
    }
    size1 = k;
    return C;
}

template<typename T>
T** f(T* arr, int size) {
    T* sum = new T(0);
    T* mult = new T(1);
    for (int i = 0; i < size; ++i) {
        *sum += arr[i];
        *mult *= arr[i];
    }
    return new T* [2]{ sum, mult };
}

template<typename T>
T* bar(T* arr, int size) {
    int countNegativeElements = 0;
    int countPositiveElements = 0;
    int countZero = 0;

    for (int i = 0; i < size; ++i) {
        if (arr[i] < 0) {
            ++countNegativeElements;
        }
        else if (arr[i] > 0) {
            ++countPositiveElements;
        }
        else {
            ++countZero;
        }
    }
    return new T[3]{ countNegativeElements, countPositiveElements, countZero };

}

template<typename T>
T* subSet(T* A, T* B, int sizeA, int sizeB) {
    if (sizeB > sizeA) {
        return nullptr;
    }
    int* pos = nullptr;
    for (int i = 0; i < sizeB; ++i) {
        T* result = nullptr;
        T count = 0;
        
        bool flag = false;
        result = in_massive(A, sizeA, B[i]);
        if (result == nullptr) {
            return nullptr;
        }
        else {
            if (pos == nullptr){
                pos = result;
            }
        }

    }
    return pos;

}
template<typename T>
int countNegativeElements(T* arr, int size) {
    int count = 0;
    for (int i = 0; i < size; ++i) {
        if (arr[i] < 0) {
            ++count;
        }
    }
    return count;
}




template<typename T>
T* delNegElement(T* arr, int &size) {

    T* tmp = new T[size - countNegativeElements(arr, size)];
    int j = 0;
    for (int i = 0; i < size; ++i) {
        if (arr[i] >= 0) {
            tmp[j++] = arr[i];
        }
    }
    delete[] arr;
    size = j;
    return tmp;

}
template<typename T>
void copyArr(T* arr1, T* arr2, int size) {
    for (int i = 0; i < size; ++i) {
        arr1[i] = arr2[i];
        
    }
}


template<typename T>
void addElements(T* &arr, T* elements, int sizeArr, int sizeElem) {
    int sz = sizeArr + sizeElem;
    T* tmp = new T[sz];

    copyArr(tmp, arr, sizeArr);
    copyArr(tmp + sz, elements, sizeElem);

    delete[] arr;
    arr = tmp;
}


int main() /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
    srand(time(0));
    setlocale(LC_ALL, "RU");

    //int a = 10;
    //int b = 20;
    //swap_2(a, b);
    //cout << a << " " << b << endl;

    //int size = 10;
    //int* ptr = creatArr(size);           //динамическое выделение памяти

    //randomizer_2(ptr, size);
    //print(ptr, size);

    //delete[] ptr;
    //
    //int* p = new int(5);
    //cout << *p << endl;
    //delete p;
    ///////////////////////// Задача 1 /////////////////////////////////
    //cout << endl << endl << endl;
    //int M = 10;
    //int N = 5;
    //int* A = creatArr(M);
    //int* B = creatArr(N);
    //randomizer_2(A, M);
    //randomizer_2(B, N);
    //print(A, M);
    //print(B, N);
    //int* C = cut_massive(A, B, M, N);
    //print(C, M);

    //delete[] A;
    //delete[] B;
    //delete[] C;
    //delete[] arr;

        ///////////////////////// Задача 2 /////////////////////////////////

    //cout << "\n\n\nЗадача 2///////////////////////";

    //int size = 5;
    //int* arr = new int [size] {1, 2, 3, 4, 5};
    //int** p = f(arr, size);
    //cout << *p[0] << "\t" << *p[1];

    //delete p[0];
    //delete p[1];
    //delete [] p;

    //cout << "\n\n\nЗадача 3///////////////////////" << endl;

    //int size2 = 5;
    //int* arr = new int[size] {1, 0, -3, -4, 5};

    //int* p2 = bar(arr, size2);
    //cout << p2[0] << " " << p2[1] << " " << p2[2] << endl;

    //delete[] p2;


    //cout << "\n\n\nЗадача 4///////////////////////" << endl;


    //int size2 = 5;
    //int* A = new int[size] {1, 0, -3, -4, 5};
    //int* B = new int[3] {1, -4, 5};

    //cout << subSet(A, B, 5, 3) << endl;
    //cout << &A[0];





     //cout << "\n\n\nЗадача 5///////////////////////" << endl;

     //int size = 10;
     //int* arr = new int [10] {1, -2, 3, -4, 5, -6, 7, -8, 9, -10};
     //arr = delNegElement(arr, size);
     //print(arr, size);

     //delete[] arr;




    cout << "\n\n\nЗадача 5///////////////////////" << endl;


    int size = 5;
    int size2 = 3;

    int *arr1 = new int[size] {1, 2, 3, 4, 5};
    int* arr2 = new int[size2] {10, 20, 20};
    addElements(arr1, arr2, size, size2);

    print(arr1, size + size2);




 









    return 0;
}