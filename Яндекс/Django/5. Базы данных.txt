Урок 2. Введение в базы данных
	- СУБД - Система управления базами данных - (выполняет роль библиотекаря в библиотеке)
	- Реляционные базы данных - набор таблиц с информацией
	- Каждая строка - это отдельная запись о каком-то объекте
	- таблицам дают название во множественном числе (не обязательно )
	- столбцам дают название в ед. числе
	- запись(строка) - это строка в таблице
	- поле(столбец, колонка) - это столбец таблицы или ячейка одной записи
	- Типы данных в SQLite:
		- INTEGER - целое число
		- REAL - дробное число
		- ТЕXT - строка
		- BLOB - двоичные числа
		- NULL - спец.значение означающее отсутствие информации
	- Первичный ключ (PK, primary key) - уникален в пределах таблицы
	- Внешний ключ(foreign key, FK) в ссылающейся таблице создается специальное поле для внешнего
	ключа, при создании этого поля указывается на какую таблицу оно ссылается. В записях в этом
	поле указывается, на какой PK другой таблицы ссылается это поле.
	
Урок 3. SQL - язык структурированных запросов
	- комментарии (--) или (/**/)
	- ключевый слова пишутся заглавными буквами и с новой строки
	- Оформить запрос по всем правилам можно с помощью форматора, например  SQLFormat.

Урок 4. Первые запросы, первые ответы
	- SQLite - легкая СУБД, которая не требует сложной настройки и хранится в одном файле
	- Работа с SQL возможна через командную строку
	- Первым делом нужно установить оболочку SQLite на компьютер
	- запуск sqlite из командной строки (winpty sqlite3) (была создана виртуальная база в памяти компьютера)
	- создать таблицу CREATE TABLE название_таблицы(название_поля TEXT, название_поля INTEGER);
	- добавить данные INSERT INTO название_таблицы VALUES('строковая_информация', 222); 
	- получить данные SELECT * FROM название_таблицы; (вернет все поля таблицы)
	- посложнее SELECT название_поля FROM название_таблицы WHERE условие(например: relese_year = 1930;
	- выйти из оболочки sqlite3 команда: .exit
	- можно взаимодействоавать с реальной базой, нужно при вызове указать имя файла где находится БД
	Например: sqlite3 db.sqlite

	- для VS code надо установить расширение: Ctrl+Shift+X -> sqlite -> SQLite Viewer -> install

Урок 5. Работа с базой данных из Python
	- «Подружить» python-программу и СУБД SQLite поможет библиотека sqlite3
	- Создание БД и таблиц
		- 1. import sqlite3
		- 2. con = sqlite3.connect('db.sqlite') (создание или подключение к БД)
		- 3. query_1 = '''sql_запрос ''' (создаем запросы)
			- В запросе указываем IF NOT EXISTS, проверяет нет ли такой таблицы в БД
		- 4. cur.execute(query_1) (применяем запросы)(метод execute() принимает одиночный запрос)
		- 5. con.close() (Закрываем соединение с БД)
		- 6. Резидентные базы данных (базу данных можно создать в памяти компьютера)
		con = sqlite3.connect(':memory:')
		
		- 7. executescript() - для нескольких запросов сразу
		- 8. Заполнение таблицы INSERT
			- можно передать SQL запрос через метод execute() (данный синтаксис небезопасен)
			- в метод execute() можно передать 2 аргумента:
				1ый аргумент - запрос INSERT с '?' Пример: 'INSERT INTO video_products VALUES(?, ?, ?, ?);'
				2ой аргумент - кортеж с данными
			- executemany() - 2ым аргументром принимает список кортежей для добавления нескольких записей
			- для сохранения изменений вызываем метод commit Пример: con.commit()

Урок 6. Получение данных
	- SELECT (после него указывают названия полей, значения которых должны вернуться)
	- FROM (после него названия таблиц)
	- Python превращает результирующую выборку в итерируемый объект
	эл.ты объекта - кортежи созначениями полей
	- Выборка по строкам (в запросе можно отфильтровать записи, удовлетворяющие заданным условиям)
		- WHERE (в результирующую выборку попадают записи соответствующие условию)
			Операторы:
				= сравнение
				<> не равно, можно применять !=
				BETWEEN ... AND ... для указания диапазона
				IN вхождение в список, Пример:  WHERE product_type IN ('Сериал', 'Фильм');
				LIKE поиск по шаблону % - заменяет набор символов, _ - заменяет один символ
				Пример: WHERE product_type LIKE 'Мульт%';
			AND, OR, NOT - для объединения нескольких условий

	- Значение NULL
		- это отсутствие какого либо значения
		- операторы IS NULL и IS NOT NULL

	- DISTINCT - получение уникальных значений
		Пример: SELECT DISTINCT product_type
                	FROM video_products;

Урок 8. Сортировка, ограничение и сдвиг выборки
	ORDER BY - сортировка данных
		- пишется после WHERE, сортировать можно по ПОЛЮ
		- ASC - по возрастанию(по умолчанию), DESC - по убыванию 
		- можно указать 2 поля, сначала сортировка по первому полю, а
		при равных значениях по второму полю

	LIMIT и OFFSET - Ограничение и сдвиг выборки
		- LIMIT <сколько строк нужно показать> OFFSET <на сколько строк сдвинуть выборку>;
		- Ограничивать выборку надо после сортировки

	Порядок применения ключевых слов:
		SELECT
		FROM
		WHERE
		ORDER BY
		LIMIT OFFSET

Урок 9. Агрегирующие функции - эти функции выполняют вычисление на наборе значений

	Агрегирующая функция возвращает результирующую таблицу, 
	в которой лишь одна колонка и одна запись — результат вычислений. 
	Например, агрегирующая функция COUNT() вернёт одно число — количество строк в полученной выборке.

	В общем виде выглядит:
		SELECT АГРЕГИРУЮЩАЯ_ФУНКЦИЯ(название_поля)    
		FROM таблица;

	COUNT
		- COUNT(название_поля) - возвращает кол.во строк в результирующей выборке (не учитывает NULL)
		- COUNT(*) - возврщает кол.во строк в таблице
		- чезез COUNT(*) - можно подсчитать кол.во в любой выборке с помощью WHERE
	
	MIN и MAX
		- поиск макс и мин значения в определенном столбце

	AVG и SUM
		- сумма и среднее значение определенного столбца (игнорирую NULL)
		
		
