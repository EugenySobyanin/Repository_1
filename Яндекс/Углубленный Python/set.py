# эл.тами множества могут быть только неизменяемые объекты (числа, строки, кортежи)
a = {1, 2, 3, 4, 5, 6, 4, 3, 2}
#a = {'лох', 'чмо', 'пидор'}
#b = {[1, 2, 3, 4,], [1, 2, 3, 4, 5, ]} # нельзя использовать в качестве элементов множества списки.

for i in a:
    print(i)

movie_ratings_set = {5.0, 4.1, 4.3, 4.7, 4.7, 3.8}
print(movie_ratings_set)

#/////// работа с множествами

# add() - добавление эл-та в множество
a = set()
for i in range(1, 10**2):
    a.add(i)

print(a)

# //// поиск эл.та в множестве
# //// сравниваем время с поиском в списке

import time
# Создается множество
num_set = set()
# С помощью цикла множество заполняется элементами от 0 до 999999
for num in range(10**6):
    num_set.add(num)

# В start_time сохраняем время в секундах перед началом поиска
start_time = time.time()
if 954365 in num_set:
    print(True)

# Выводим в терминал время, затраченное на поиск нужного элемента:
print(time.time() - start_time)

# Создаём и наполняем список:
num_list = []
for num in range(10**6):
    num_list.append(num)

start_time = time.time()
if 954365 in num_list:
    print(True)
print(time.time() - start_time)

# удаление элементов, методы:
# remove(), discard(), pop()
# remove() - вызывает ошибку, если эл.та нет в множестве
# discard() - схож с remove(), но не вызывает ошибку
# pop() - удаляет и возвращает случайныйы эл.т

a = {'кола', 'фанта', 'спрайт'}
drink = a.pop()
print(drink)
print(a)

# очистка множества clear()
print(a)
a.clear()
print(a)

# операции со множествами
# //// персечение 
# оператор & - возвращает новое множество с эл.тами которые есть в первом и втором
a = {1, 3, 4, 5, 6, 7, 8, }
b = {3, 7, 10, 12, }
print(a & b)

#  метод intersection()
'''С помощью этого метода можно получить пересечение множества 
   с любым итерируемым объектом, все элементы которого — хешируемые объекты 
   (например — со списком, элементы которого — числа или строки). 
   Это справедливо и для других методов множеств: в аргументы этих методов 
   можно передать любой итерируемый объект с хешируемыми элементами.
'''
c = a.intersection(b)
print(c)

# ///// объедение
# оператор |  - возвращает множество с элементами двух множеств
c = a | b
print(c)
# метод union()
c = a.union(b)
print(c)

# /////// разность
# метод difference() - из первого множества вычитает эл.ты второго и возврщает оставшиеся
c = a.difference(b)
print(c)


# ////// симметрическая разность
'''Симметрической разностью двух множеств будет третье множество, 
каждый элемент которого принадлежит либо первому, 
либо второму множеству, но не их пересечению.
'''
# метод symmetric_difference() 
c = a.symmetric_difference(b)
print(a)
print(b)
print(c)